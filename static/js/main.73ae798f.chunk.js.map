{"version":3,"sources":["actions/index.js","components/searchBar.js","components/displayMap.js","components/displayInfo.js","components/displayChart.js","components/displayCanvas.js","App.js","reducers/index.js","reducers/weatherReducer.js","serviceWorker.js","index.js"],"names":["ROOT_URL","FETCH_WEATHER","fetchWeather","city","url","request","axios","get","type","payload","SearchBar","props","state","term","onInputChange","bind","onFormSubmit","event","this","setState","target","value","preventDefault","className","onSubmit","placeholder","onChange","React","Component","connect","dispatch","bindActionCreators","DisplayMap","window","google","maps","Map","refs","map","zoom","center","lat","lng","lon","style","width","height","ref","Info","name","population","id","data","color","_","round","sum","length","units","DisplayCanvas","cityData","temps","list","weather","main","temp","pressures","pressure","humidities","humidity","coord","key","renderWeather","App","Fragment","rootReducer","combineReducers","action","Boolean","location","hostname","match","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73ae798f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_KEY = \"6a78596d062df78380eff5944c4e5567\";\nconst ROOT_URL = `http://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\nexport function fetchWeather(city){\n\n    const url = `${ROOT_URL}&q=${city},mm`;\n    const request = axios.get(url);\n\n    return{\n        type:FETCH_WEATHER,\n        payload:request\n    };\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {fetchWeather} from '../actions/index';\nimport './searchBar.css';\n\nclass SearchBar extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {term:''}\n\n        this.onInputChange = this.onInputChange.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n\n    }\n\n    onInputChange(event){\n\n        this.setState({term:event.target.value});\n    }\n\n    onFormSubmit(event){\n        event.preventDefault();\n\n        this.props.fetchWeather(this.state.term)\n        this.setState({term:''})\n        \n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n\n                <form onSubmit={this.onFormSubmit}>\n                    <div className=\"form-row\">\n                        <div className=\"col-8\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\" Type The Correct Names of Cities in Myanmar...\" value={this.state.term} onChange={this.onInputChange} />\n                        </div>\n                        <div className=\"col-4\">\n\n                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                       <i className=\"fas fa-search\" />\n                       <b>&nbsp;search</b>\n                       </button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n        )\n    }\n}\n\n\nfunction mapDispatchToProps(dispatch){\n\n    return bindActionCreators({fetchWeather}, dispatch);\n}\n\n\nexport default connect(null, mapDispatchToProps)(SearchBar);","import React from 'react';\nimport './displayCanvas.css';\n\nclass DisplayMap extends React.Component{\n\n    componentDidMount() {\n        new window.google.maps.Map(this.refs.map, {\n          zoom: 8,\n          center: {\n            lat: this.props.lat,\n            lng: this.props.lon\n          }\n        });\n      }\n\n    render(){\n        return(\n            <div className=\"card border-success mb-3\" style={{width: 300, height:250}}>\n            \n            <div ref=\"map\" className=\"card-img-top\" style={{width: '100%', height:'100%'}}>\n              \n            </div>\n        \n          </div>\n        )\n    }\n}\n\nexport default DisplayMap;","import React from 'react'\n\nconst Info = ({ name, population, id }) => {\n\n\n\n    return (\n        <div className=\"card\">\n            <h5 className=\"card-header center\"><i className=\"fas fa-map-marker-alt fa-2x\" /> City : {name}</h5>\n            <div className=\"card-body\">\n                <h6 className=\"card-title center\"><i className=\"fas fa-users\" /> population : {population}</h6>\n                <h6 className=\"card-title center\"><i className=\"fas fa-map-marked-alt\"/> C- ID : {id}</h6>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Info;\n","import _ from \"lodash\";\nimport React from \"react\";\nimport {\n  Sparklines,\n  SparklinesLine,\n  SparklinesReferenceLine\n} from \"react-sparklines\";\n\nfunction average(data) {\n  return _.round(_.sum(data) / data.length);\n}\n\nexport default props => {\n  return (\n    <div>\n      <Sparklines height={120} width={180} data={props.data}>\n        <SparklinesLine color={props.color} />\n        <SparklinesReferenceLine type=\"avg\" />\n      </Sparklines>\n      <div>{average(props.data)} {props.units}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './displayCanvas.css';\nimport DisplayMap from './displayMap';\nimport Info from './displayInfo';\nimport Chart from './displayChart';\nimport { connect } from 'react-redux';\n\n\nclass DisplayCanvas extends React.Component {\n\n    renderWeather(cityData) {\n        const {name, population, id} = cityData.city;\n        const temps = cityData.list.map(weather => weather.main.temp);\n        const pressures = cityData.list.map(weather => weather.main.pressure);\n        const humidities = cityData.list.map(weather => weather.main.humidity);\n        const { lon, lat } = cityData.city.coord;\n\n        return (\n            <tr key={name}>\n                <td><DisplayMap lon={lon} lat={lat} id={id} /></td>\n                <td><Info name={name} population={population} /></td>\n                <td><Chart data={temps} color=\"orange\" units=\"K\" /></td>\n                <td><Chart data={pressures} color=\"green\" units=\"hPa\" /></td>\n                <td><Chart data={humidities} color=\"black\" units=\"%\" /></td>\n            </tr>\n        );\n    }\n\n\n    render() {\n\n        return (\n\n            <div className=\"container-fluid\">\n\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>City</th>\n                            <th>Information</th>\n                            <th>Temperature (K)</th>\n                            <th>Pressure (hPa)</th>\n                            <th>Humidity (%)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.weather.map(this.renderWeather)}\n                    </tbody>\n                </table>\n\n            </div>\n\n        )\n    }\n}\n\nfunction mapStateToProps({ weather }) {\n    return { weather };\n  }\n  \n  export default connect(mapStateToProps)(DisplayCanvas);\n  \n","import React from 'react';\nimport SearchBar from './components/searchBar';\nimport DisplayCanvas from './components/displayCanvas';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <SearchBar/>\n      <DisplayCanvas/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { combineReducers} from 'redux';\nimport weatherReducer from './weatherReducer';\n\nconst rootReducer = combineReducers({\n    weather:weatherReducer\n})\n\n\nexport default rootReducer;","import { FETCH_WEATHER } from \"../actions/index\";\n\nexport default function(state=[], action){\n    switch(action.type){\n        case FETCH_WEATHER :\n        return [action.payload.data, ...state];\n\n        default:\n        return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport ReduxPromise from 'redux-promise';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(rootReducer)}>\n        <App/>\n    </Provider>,\n   \n   document.getElementById('root')\n)\nserviceWorker.unregister();\n"],"sourceRoot":""}